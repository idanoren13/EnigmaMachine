Index: src/enigmaEngine/CreateEnigmaMachineToDebug.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package enigmaEngine;\r\n\r\nimport enigmaEngine.impl.EnigmaEngineImpl;\r\nimport enigmaEngine.impl.PlugBoardImpl;\r\nimport enigmaEngine.impl.ReflectorImpl;\r\nimport enigmaEngine.impl.RotorImpl;\r\nimport enigmaEngine.interfaces.InitializeEnigmaComponents;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.HashMap;\r\n\r\npublic class CreateEnigmaMachineToDebug implements InitializeEnigmaComponents {\r\n    @Override\r\n    public EnigmaEngineImpl getEnigmaEngineFromSource(String source) {\r\n        ArrayList<Character> abc = new ArrayList<Character>();\r\n        HashMap<Integer, enigmaEngine.interfaces.Rotor> rotors = new HashMap<Integer, enigmaEngine.interfaces.Rotor>();\r\n        HashMap<Integer, enigmaEngine.interfaces.Reflector> reflectors = new HashMap<Integer, enigmaEngine.interfaces.Reflector>();\r\n        abc.add('A');\r\n        abc.add('B');\r\n        abc.add('C');\r\n        abc.add('D');\r\n        abc.add('E');\r\n        abc.add('F');\r\n        abc.add('G');\r\n        abc.add('H');\r\n        abc.add('I');\r\n        abc.add('J');\r\n        abc.add('K');\r\n        abc.add('L');\r\n\r\n        enigmaEngine.interfaces.PlugBoard plugBoard = new PlugBoardImpl();\r\n        plugBoard.addPair('C', 'B');\r\n\r\n//        rotors.put(1, new RotorImpl(1, 3, stringToArrayList(\"ABCDEF\"), stringToArrayList(\"FEDCBA\")));\r\n//        rotors.put(3, new RotorImpl(3, 5, stringToArrayList(\"ABCDEF\"), stringToArrayList(\"BADCFE\")));\r\n//        rotors.put(2, new RotorImpl(2, 0, stringToArrayList(\"ABCDEF\"), stringToArrayList(\"EBDFCA\")));\r\n        rotors.put(1, new RotorImpl(1, 3, stringToArrayList(\"ABCDEFGHIJKL\"), stringToArrayList(\"HAIJCDEGLKBF\")));\r\n        rotors.put(3, new RotorImpl(3, 5, stringToArrayList(\"ABCDEFGHIJKL\"), stringToArrayList(\"GHICDEFJKLAB\")));\r\n        rotors.put(2, new RotorImpl(2, 0, stringToArrayList(\"ABCDEFGHIJKL\"), stringToArrayList(\"CFLBHIGKDEGA\")));\r\n\r\n        HashMap<Integer, Integer> Pairs1 = new HashMap<Integer, Integer>();\r\n        //decrementing the index by 1 to match the index of the abc arraylist\r\n        Pairs1.put(0, 6);\r\n        Pairs1.put(1, 7);\r\n        Pairs1.put(2, 8);\r\n        Pairs1.put(3, 9);\r\n        Pairs1.put(4, 10);\r\n        Pairs1.put(5, 11);\r\n        Pairs1.put(6, 0);\r\n        Pairs1.put(7, 1);\r\n        Pairs1.put(8, 2);\r\n        Pairs1.put(9, 3);\r\n        Pairs1.put(10, 4);\r\n        Pairs1.put(11, 5);\r\n\r\n        HashMap<Integer, Integer> Pairs2 = new HashMap<Integer, Integer>();\r\n        Pairs2.put(0, 1);\r\n        Pairs2.put(1, 0);\r\n        Pairs2.put(2, 3);\r\n        Pairs2.put(3, 2);\r\n        Pairs2.put(4, 5);\r\n        Pairs2.put(5, 4);\r\n        Pairs2.put(6, 7);\r\n        Pairs2.put(7, 6);\r\n        Pairs2.put(8, 9);\r\n        Pairs2.put(9, 8);\r\n        Pairs2.put(10, 11);\r\n        Pairs2.put(11, 10);\r\n\r\n        reflectors.put(1, new ReflectorImpl(Pairs1, enigmaEngine.interfaces.Reflector.ReflectorID.I));\r\n        reflectors.put(2, new ReflectorImpl(Pairs2, enigmaEngine.interfaces.Reflector.ReflectorID.II));\r\n\r\n        return new EnigmaEngineImpl(rotors, reflectors, plugBoard, abc);\r\n    }\r\n\r\n    private ArrayList<Character> stringToArrayList(String input) {\r\n        ArrayList<Character> output = new ArrayList<Character>();\r\n        for (int i = 0; i < input.length(); i++) {\r\n            output.add(input.charAt(i));\r\n        }\r\n        return output;\r\n    }\r\n}\r\n
===================================================================
diff --git a/src/enigmaEngine/CreateEnigmaMachineToDebug.java b/src/enigmaEngine/CreateEnigmaMachineToDebug.java
--- a/src/enigmaEngine/CreateEnigmaMachineToDebug.java	
+++ b/src/enigmaEngine/CreateEnigmaMachineToDebug.java	
@@ -3,7 +3,7 @@
 import enigmaEngine.impl.EnigmaEngineImpl;
 import enigmaEngine.impl.PlugBoardImpl;
 import enigmaEngine.impl.ReflectorImpl;
-import enigmaEngine.impl.RotorImpl;
+import enigmaEngine.impl.Rotor;
 import enigmaEngine.interfaces.InitializeEnigmaComponents;
 
 import java.util.ArrayList;
@@ -34,9 +34,9 @@
 //        rotors.put(1, new RotorImpl(1, 3, stringToArrayList("ABCDEF"), stringToArrayList("FEDCBA")));
 //        rotors.put(3, new RotorImpl(3, 5, stringToArrayList("ABCDEF"), stringToArrayList("BADCFE")));
 //        rotors.put(2, new RotorImpl(2, 0, stringToArrayList("ABCDEF"), stringToArrayList("EBDFCA")));
-        rotors.put(1, new RotorImpl(1, 3, stringToArrayList("ABCDEFGHIJKL"), stringToArrayList("HAIJCDEGLKBF")));
-        rotors.put(3, new RotorImpl(3, 5, stringToArrayList("ABCDEFGHIJKL"), stringToArrayList("GHICDEFJKLAB")));
-        rotors.put(2, new RotorImpl(2, 0, stringToArrayList("ABCDEFGHIJKL"), stringToArrayList("CFLBHIGKDEGA")));
+        rotors.put(1, new Rotor(1, 3, stringToArrayList("ABCDEFGHIJKL"), stringToArrayList("HAIJCDEGLKBF")));
+        rotors.put(3, new Rotor(3, 5, stringToArrayList("ABCDEFGHIJKL"), stringToArrayList("GHICDEFJKLAB")));
+        rotors.put(2, new Rotor(2, 0, stringToArrayList("ABCDEFGHIJKL"), stringToArrayList("CFLBHIGKDEGA")));
 
         HashMap<Integer, Integer> Pairs1 = new HashMap<Integer, Integer>();
         //decrementing the index by 1 to match the index of the abc arraylist
Index: src/enigmaEngine/CreateEnigmaMachineFromFile.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package enigmaEngine;\r\n\r\nimport enigmaEngine.impl.EnigmaEngineImpl;\r\nimport enigmaEngine.impl.ReflectorImpl;\r\nimport enigmaEngine.impl.RotorImpl;\r\nimport enigmaEngine.interfaces.InitializeEnigmaComponents;\r\nimport enigmaEngine.schemaBinding.*;\r\n\r\nimport javax.xml.bind.JAXBContext;\r\nimport javax.xml.bind.JAXBException;\r\nimport javax.xml.bind.Unmarshaller;\r\nimport java.io.FileInputStream;\r\nimport java.io.FileNotFoundException;\r\nimport java.io.InputStream;\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\n\r\npublic enum CreateEnigmaMachineFromFile implements InitializeEnigmaComponents {\r\n    XML {\r\n        @Override\r\n        public EnigmaEngineImpl getEnigmaEngineFromSource(String path) {\r\n            CTEEnigma xmlOutput = null;\r\n            try {\r\n                if (path.contains(\".xml\") == false) {\r\n                    throw new FileNotFoundException(\"File given is not of XML type.\");\r\n                }\r\n                InputStream xmlFile = new FileInputStream(path);\r\n                JAXBContext jaxbContext = JAXBContext.newInstance(\"enigmaEngine.schemaBinding\");\r\n                Unmarshaller jaxbUnmarshaller = jaxbContext.createUnmarshaller();\r\n                xmlOutput = (CTEEnigma)jaxbUnmarshaller.unmarshal(xmlFile);\r\n            } catch (JAXBException | FileNotFoundException e) {\r\n                e.printStackTrace();\r\n            }\r\n            try {\r\n                assert xmlOutput != null;\r\n                CTEMachine machine = xmlOutput.getCTEMachine();\r\n                if (machine == null) {\r\n                    throw new RuntimeException(\"ERROR! The XML that is given does not contain any machine.\");\r\n                }\r\n                String cteMachineABC = machine.getABC().trim();\r\n                if (cteMachineABC.length() % 2 == 1) {\r\n                    throw new RuntimeException(\"ERROR! The XML that is given contains an odd number of letters.\");\r\n                }\r\n                int cteRotorsCount = machine.getRotorsCount();\r\n                CTERotors cteRotors = machine.getCTERotors();\r\n                if (cteRotorsCount > machine.getCTEReflectors().getCTEReflector().size()) {\r\n                    throw new RuntimeException(\"ERROR! The XML that is given, contains in its settings more needed rotors than actual rotors.\");\r\n                }\r\n                List<CTEReflector> cteReflectors = new ArrayList<>(machine.getCTEReflectors().getCTEReflector());\r\n\r\n                List<RotorImpl> rotors = new ArrayList<>();\r\n                // TODO: check that all rotors IDs are given from 1 to n without empty IDs\r\n                for (CTERotor rotor : cteRotors.getCTERotor()) {\r\n                    int id = rotor.getId(), notch = rotor.getNotch();\r\n                    if (0 >= notch || notch >= cteMachineABC.length()) {\r\n                        throw new RuntimeException(\"ERROR! The XML that is given contains an invalid notch index of a given rotor.\");\r\n                    }\r\n                    // TODO: check if one of the numbers is bigger than the length of the ABC or non-positive or appears twice\r\n                    List<Character> right = new ArrayList<>(); // TODO: may change to HashMap in order to check if a given letter is already given\r\n                    List<Character> left = new ArrayList<>();\r\n                    for (CTEPositioning pair : rotor.getCTEPositioning()) {\r\n                        /*if (pair.getRight().equals(pair.getLeft()) == true) {\r\n                            throw new RuntimeException(\"ERROR! The XML that is given contains a rotor that maps to itself.\");\r\n                        }*/\r\n                        right.add(pair.getRight().charAt(0));\r\n                        left.add(pair.getLeft().charAt(0));\r\n                    }\r\n                    rotors.add(new RotorImpl(id, notch, right, left));\r\n                }\r\n                // TODO: check if the 'reflectors' list size is maximum 5\r\n                List<ReflectorImpl> reflectors = new ArrayList<>();\r\n                for (CTEReflector reflector : cteReflectors) {\r\n                    enigmaEngine.interfaces.Reflector.ReflectorID id;\r\n                    try {\r\n                        id = enigmaEngine.interfaces.Reflector.ReflectorID.valueOf(reflector.getId().toUpperCase());\r\n                    } catch(IllegalArgumentException e) {\r\n                        throw new RuntimeException(\"ERROR! Invalid ID for enum \"\r\n                                + enigmaEngine.interfaces.Reflector.ReflectorID.class.getSimpleName() // TODO: check if this line works\r\n                                + \" of a given reflector: \" + reflector.getId()\r\n                                + \". Valid IDs are only: I, II, III, VI, V.\");\r\n                    }\r\n                    // TODO: check if one of the numbers is bigger than the length of the ABC or non-positive or appears twice\r\n                    List<Integer> input = new ArrayList<>();\r\n                    List<Integer> output = new ArrayList<>();\r\n                    for (CTEReflect pair : reflector.getCTEReflect()) {\r\n                        if (pair.getInput() == pair.getOutput()) {\r\n                            throw new RuntimeException(\"ERROR! The XML that is given contains a reflector that maps a letter to itself.\");\r\n                        }\r\n                        input.add(pair.getInput());\r\n                        output.add(pair.getOutput());\r\n                    }\r\n                    reflectors.add(new ReflectorImpl(input, output, id));\r\n                }\r\n                return null;\r\n            } catch (RuntimeException e) {\r\n                e.printStackTrace(); // TODO: check how to print the error message to screen\r\n                return null;\r\n            } catch (AssertionError e) {\r\n                throw new RuntimeException(\"ERROR! File \" + path + \" is not of XML format.\");\r\n            }\r\n        }\r\n    },\r\n    JSON {\r\n        @Override\r\n        public EnigmaEngineImpl getEnigmaEngineFromSource(String path) {\r\n            return null;\r\n        }\r\n    };\r\n\r\n    abstract public EnigmaEngineImpl getEnigmaEngineFromSource(String path);\r\n\r\n    public static void main(String[] args) {\r\n        // WHAT I DID IN CMD: xjc -d . -p enigmaEngine.schemaBinding Enigma-Ex1.xsd\r\n        ((InitializeEnigmaComponents) CreateEnigmaMachineFromFile.XML).getEnigmaEngineFromSource(\"ex1-sanity-small.xml\");\r\n    }\r\n}\r\n
===================================================================
diff --git a/src/enigmaEngine/CreateEnigmaMachineFromFile.java b/src/enigmaEngine/CreateEnigmaMachineFromFile.java
--- a/src/enigmaEngine/CreateEnigmaMachineFromFile.java	
+++ b/src/enigmaEngine/CreateEnigmaMachineFromFile.java	
@@ -2,7 +2,7 @@
 
 import enigmaEngine.impl.EnigmaEngineImpl;
 import enigmaEngine.impl.ReflectorImpl;
-import enigmaEngine.impl.RotorImpl;
+import enigmaEngine.impl.Rotor;
 import enigmaEngine.interfaces.InitializeEnigmaComponents;
 import enigmaEngine.schemaBinding.*;
 
@@ -48,7 +48,7 @@
                 }
                 List<CTEReflector> cteReflectors = new ArrayList<>(machine.getCTEReflectors().getCTEReflector());
 
-                List<RotorImpl> rotors = new ArrayList<>();
+                List<Rotor> rotors = new ArrayList<>();
                 // TODO: check that all rotors IDs are given from 1 to n without empty IDs
                 for (CTERotor rotor : cteRotors.getCTERotor()) {
                     int id = rotor.getId(), notch = rotor.getNotch();
@@ -65,7 +65,7 @@
                         right.add(pair.getRight().charAt(0));
                         left.add(pair.getLeft().charAt(0));
                     }
-                    rotors.add(new RotorImpl(id, notch, right, left));
+                    rotors.add(new Rotor(id, notch, right, left));
                 }
                 // TODO: check if the 'reflectors' list size is maximum 5
                 List<ReflectorImpl> reflectors = new ArrayList<>();
