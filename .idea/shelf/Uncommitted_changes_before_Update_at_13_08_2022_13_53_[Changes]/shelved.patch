Index: src/enigmaEngine/InitializeEnigmaEngine.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/enigmaEngine/InitializeEnigmaEngine.java b/Engine/src/enigmaEngine/InitializeEnigmaEngine.java
rename from src/enigmaEngine/InitializeEnigmaEngine.java
rename to Engine/src/enigmaEngine/InitializeEnigmaEngine.java
--- a/src/enigmaEngine/InitializeEnigmaEngine.java	(revision 456a367a7a579f9a14793435c5402d6bcd0da362)
+++ b/Engine/src/enigmaEngine/InitializeEnigmaEngine.java	(date 1660386002757)
@@ -3,20 +3,23 @@
 import enigmaEngine.exceptions.InvalidABCException;
 import enigmaEngine.exceptions.InvalidReflectorException;
 import enigmaEngine.exceptions.InvalidRotorException;
-import enigmaEngine.impl.EnigmaEngine;
+import enigmaEngine.exceptions.UnknownSourceException;
+import enigmaEngine.interfaces.EnigmaEngine;
 import enigmaEngine.interfaces.InitializeEnigma;
 
 import javax.xml.bind.JAXBException;
 import java.io.FileNotFoundException;
 
 public class InitializeEnigmaEngine {
-    public enum sourceMode{
+    public enum SourceMode{
         XML,
         DEBUG,
         JSON
     }
 
-    public EnigmaEngine initializeEngine(sourceMode source, String path) throws InvalidRotorException, InvalidABCException, InvalidReflectorException, JAXBException, FileNotFoundException {
+    private String lastFilePath = null;
+
+    public EnigmaEngine initializeEngine(SourceMode source, String path) throws InvalidRotorException, InvalidABCException, InvalidReflectorException, JAXBException, FileNotFoundException, UnknownSourceException {
         InitializeEnigma enigmaEngineInitializer = null;
 
         switch (source){
@@ -26,8 +29,16 @@
             case DEBUG:
                 enigmaEngineInitializer = new EnigmaMachineToDebug();
                 break;
+            default:
+                throw new UnknownSourceException("Unknown file extension source is given.");
         }
-        
-        return enigmaEngineInitializer.getEnigmaEngineFromSource(path);
+        if (lastFilePath != null && lastFilePath.equals(path) == true) {
+            // TODO: add exception and get out
+            System.out.println("This file already exists in the machine.");
+            return null;
+        }
+        else {
+            return enigmaEngineInitializer.getEnigmaEngineFromSource(path);
+        }
     }
 }
Index: src/enigmaEngine/EnigmaMachineFromXML.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/enigmaEngine/EnigmaMachineFromXML.java b/Engine/src/enigmaEngine/EnigmaMachineFromXML.java
rename from src/enigmaEngine/EnigmaMachineFromXML.java
rename to Engine/src/enigmaEngine/EnigmaMachineFromXML.java
--- a/src/enigmaEngine/EnigmaMachineFromXML.java	(revision 456a367a7a579f9a14793435c5402d6bcd0da362)
+++ b/Engine/src/enigmaEngine/EnigmaMachineFromXML.java	(date 1660317939827)
@@ -3,10 +3,8 @@
 import enigmaEngine.exceptions.InvalidABCException;
 import enigmaEngine.exceptions.InvalidReflectorException;
 import enigmaEngine.exceptions.InvalidRotorException;
-import enigmaEngine.impl.EnigmaEngine;
+import enigmaEngine.impl.EnigmaEngineImpl;
 import enigmaEngine.impl.PlugBoardImpl;
-import enigmaEngine.impl.ReflectorImpl;
-import enigmaEngine.impl.RotorImpl;
 import enigmaEngine.interfaces.InitializeEnigma;
 import enigmaEngine.interfaces.Reflector;
 import enigmaEngine.interfaces.Rotor;
@@ -28,7 +26,7 @@
     private CreateAndValidateEnigmaComponentsImpl createAndValidateEnigmaComponents;
 
     @Override
-    public EnigmaEngine getEnigmaEngineFromSource(String path) throws FileNotFoundException, JAXBException, RuntimeException, InvalidABCException, InvalidReflectorException, InvalidRotorException {
+    public EnigmaEngineImpl getEnigmaEngineFromSource(String path) throws FileNotFoundException, JAXBException, RuntimeException, InvalidABCException, InvalidReflectorException, InvalidRotorException {
         CTEEnigma xmlOutput = null;
 
         if (!path.contains(".xml")) {
@@ -42,7 +40,7 @@
         return getEnigmaEngine(path, xmlOutput);
     }
 
-    private EnigmaEngine getEnigmaEngine(String path, CTEEnigma xmlOutput) throws RuntimeException, InvalidABCException, InvalidReflectorException, InvalidRotorException {
+    private EnigmaEngineImpl getEnigmaEngine(String path, CTEEnigma xmlOutput) throws RuntimeException, InvalidABCException, InvalidReflectorException, InvalidRotorException {
 
         assert xmlOutput != null;
         String cteMachineABC;
@@ -117,6 +115,6 @@
 
         createAndValidateEnigmaComponents.validateReflectorsIDs(reflectors);
 
-        return new EnigmaEngine(rotors, reflectors, new PlugBoardImpl(), cteMachineABC);
+        return new EnigmaEngineImpl(rotors, reflectors, new PlugBoardImpl(), cteMachineABC);
     }
 }
Index: src/enigmaEngine/impl/PlugBoardImpl.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/enigmaEngine/impl/PlugBoardImpl.java b/Engine/src/enigmaEngine/impl/PlugBoardImpl.java
rename from src/enigmaEngine/impl/PlugBoardImpl.java
rename to Engine/src/enigmaEngine/impl/PlugBoardImpl.java
--- a/src/enigmaEngine/impl/PlugBoardImpl.java	(revision 456a367a7a579f9a14793435c5402d6bcd0da362)
+++ b/Engine/src/enigmaEngine/impl/PlugBoardImpl.java	(date 1660348375151)
@@ -1,9 +1,12 @@
 package enigmaEngine.impl;
 
-import javafx.util.Pair;
+import Resources.PairClass;
+
 import java.util.HashMap;
 import java.util.List;
 
+// TODO: add validations to this class
+
 public class PlugBoardImpl implements enigmaEngine.interfaces.PlugBoard {
     private final HashMap<Character, Character> abcPairs;
 
@@ -11,12 +14,12 @@
         this.abcPairs = new HashMap<Character, Character>();
     }
 
-    public PlugBoardImpl(List<Pair<Character,Character>> pairList) {
+    public PlugBoardImpl(List<PairClass<Character,Character>> pairList) {
         this.abcPairs = generateInputIntoPairs(pairList);
     }
 
 
-    private HashMap<Character, Character> generateInputIntoPairs(List<Pair<Character,Character>> pairList) {
+    private HashMap<Character, Character> generateInputIntoPairs(List<PairClass<Character,Character>> pairList) {
 //        String[] allPairs = pairList.split(",");
 //        HashMap<Character, Character> abcPairs = new HashMap<>();
 //        for (String pair : allPairs) {
@@ -28,7 +31,7 @@
 //        return abcPairs;
 
         HashMap<Character, Character> abcPairs = new HashMap<>();
-        for (Pair<Character,Character> pair : pairList) {
+        for (PairClass<Character,Character> pair : pairList) {
             abcPairs.put(pair.getKey(), pair.getValue());
             abcPairs.put(pair.getValue(), pair.getKey());
         }
@@ -46,7 +49,7 @@
     }
 
     @Override
-    public void UpdatePairs(List<Pair<Character, Character>> pairList) {
+    public void UpdatePairs(List<PairClass<Character, Character>> pairList) {
         this.abcPairs.clear();
         this.abcPairs.putAll(generateInputIntoPairs(pairList));
     }
Index: src/enigmaEngine/Main.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/enigmaEngine/Main.java b/Engine/src/enigmaEngine/Main.java
rename from src/enigmaEngine/Main.java
rename to Engine/src/enigmaEngine/Main.java
--- a/src/enigmaEngine/Main.java	(revision 456a367a7a579f9a14793435c5402d6bcd0da362)
+++ b/Engine/src/enigmaEngine/Main.java	(date 1660387831033)
@@ -1,10 +1,12 @@
 package enigmaEngine;
 
+import Resources.PairClass;
 import enigmaEngine.exceptions.InvalidABCException;
 import enigmaEngine.exceptions.InvalidReflectorException;
 import enigmaEngine.exceptions.InvalidRotorException;
 import enigmaEngine.exceptions.InvalidStartingCharacters;
-import enigmaEngine.impl.EnigmaEngine;
+import enigmaEngine.impl.EnigmaEngineImpl;
+import enigmaEngine.impl.PlugBoardImpl;
 import enigmaEngine.interfaces.Reflector;
 
 import java.util.ArrayList;
@@ -12,25 +14,26 @@
 import java.util.List;
 
 public class Main {
-    //TODO: The machine starts with 0 and not 1 as required
+    // TODO: The machine starts with 0 and not 1 as required
     public static void main(String[] args) {
         // ~~~~~~~~~ UI : initialize the machine on start ~~~~~~~~~
         InitializeEnigmaEngine enigmaEngineInitializer = new InitializeEnigmaEngine();
-//        EnigmaEngine enigmaEngine = enigmaEngineInitializer.initializeEngine(InitializeEnigmaEngine.sourceMode.DEBUG, "");
-        EnigmaEngine enigmaEngine = null;
+//      EnigmaEngine enigmaEngine = enigmaEngineInitializer.initializeEngine(InitializeEnigmaEngine.sourceMode.DEBUG, "");
+        EnigmaEngineImpl enigmaEngine = null;
 
         // ~~~~~~~~~ UI : option 1 Load from XML ~~~~~~~~~
         try {
-            enigmaEngine = enigmaEngineInitializer.initializeEngine(InitializeEnigmaEngine.sourceMode.XML, "src/Resources/ex1-sanity-small.xml");
-        } catch (InvalidRotorException | InvalidReflectorException | InvalidABCException e) {   //exception thrown by the enigma engine initialization
+            String path = System.getProperty("user.dir") + "\\Engine\\src\\Resources\\ex1-sanity-small.xml";
+            enigmaEngine = (EnigmaEngineImpl)enigmaEngineInitializer.initializeEngine(InitializeEnigmaEngine.SourceMode.XML, path);
+        } catch (InvalidRotorException | InvalidReflectorException | InvalidABCException e) { // exception thrown by the enigma engine initialization
             throw new RuntimeException(e);
-        }catch (Exception e) {  //we want to catch all exceptions and not just the ones that are thrown by the enigma engine
+        } catch (Exception e) { // we want to catch all enigmaEngine.exceptions and not just the ones that are thrown by the enigma engine
             e.printStackTrace();
         }
 
         // ~~~~~~~~~ UI : option 3 set machine state manually ~~~~~~~~~
         List<Integer> selectedRotors = Arrays.asList(2, 1);
-        ArrayList<Character> startingCharacters = new ArrayList<>();
+        List<Character> startingCharacters = new ArrayList<>();
 
         startingCharacters.add('C');
         startingCharacters.add('C');
@@ -43,10 +46,13 @@
         } catch (InvalidRotorException e) {
             throw new RuntimeException(e);
         }
-
+        List<PairClass<Character, Character>> plugBoardPairs = new ArrayList<PairClass<Character, Character>>(){{
+            add(new PairClass<Character, Character>(Character.toUpperCase('a'), Character.toUpperCase('f')));
+        }};
+        enigmaEngine.setPlugBoard(new PlugBoardImpl(plugBoardPairs));
         // ~~~~~~~~~ UI : option 5 encrypt/decrypt message ~~~~~~~~~
-        String secretMessage = /*"ABCDEFGHIJKL";*/ "ABCDEF";
-        String encryptedMessage = /*"KFBLICCCLFIB";*/ "BCDEFC";
+        String secretMessage = "AABBCCDDEEFF"; /*"ABCDEFGHIJKL";*/ /*"ABCDEF"*/;
+        String encryptedMessage = "CEEFBDFCDAAB"; /*"KFBLICCCLFIB"*/ /*"BCDEFC"*/;
 
         for (int i = 0; i < secretMessage.length(); i++) {
             System.out.print(enigmaEngine.activate(secretMessage.charAt(i)));
Index: src/enigmaEngine/impl/EnigmaEngine.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/enigmaEngine/impl/EnigmaEngine.java b/Engine/src/enigmaEngine/impl/EnigmaEngineImpl.java
rename from src/enigmaEngine/impl/EnigmaEngine.java
rename to Engine/src/enigmaEngine/impl/EnigmaEngineImpl.java
--- a/src/enigmaEngine/impl/EnigmaEngine.java	(revision 456a367a7a579f9a14793435c5402d6bcd0da362)
+++ b/Engine/src/enigmaEngine/impl/EnigmaEngineImpl.java	(date 1660387829118)
@@ -2,31 +2,32 @@
 
 import enigmaEngine.exceptions.InvalidRotorException;
 import enigmaEngine.exceptions.InvalidStartingCharacters;
+import enigmaEngine.interfaces.EnigmaEngine;
 import enigmaEngine.interfaces.PlugBoard;
 import enigmaEngine.interfaces.Reflector;
 import enigmaEngine.interfaces.Rotor;
 
 import java.util.*;
 
-public class EnigmaEngine {
+public class EnigmaEngineImpl implements EnigmaEngine {
     private final HashMap<Integer, Rotor> rotors;
     private final HashMap<Reflector.ReflectorID, Reflector> reflectors;
-    private final PlugBoard plugBoard;
+    private PlugBoard plugBoard;
     private final String machineABC;
     private final Map<Character, Character> machineABCMap;
-    private final Stack<Rotor> rotorStackRightToLeft;
-    private final Stack<Rotor> rotorStackLeftToRight;
+    private final Deque<Rotor> rotorStackRightToLeft; // Stack is thread-safe, ArrayDeque is not. Both are LIFO
+    private final Deque<Rotor> rotorStackLeftToRight; // Stack is thread-safe, ArrayDeque is not. Both are LIFO
     private List<Integer> selectedRotors;
     private Reflector selectedReflector;
     private List<Character> startingCharacters;
 
-    public EnigmaEngine(HashMap<Integer, Rotor> rotors, HashMap<Reflector.ReflectorID, Reflector> reflectors, PlugBoard plugBoard, String abc) {
+    public EnigmaEngineImpl(HashMap<Integer, Rotor> rotors, HashMap<Reflector.ReflectorID, Reflector> reflectors, PlugBoard plugBoard, String abc) {
         this.rotors = rotors;
         this.reflectors = reflectors;
         this.plugBoard = plugBoard;
         this.machineABC = abc;
-        this.rotorStackRightToLeft = new Stack<>();
-        this.rotorStackLeftToRight = new Stack<>();
+        this.rotorStackRightToLeft = new ArrayDeque<>(); // Stack is thread-safe, ArrayDeque is not. Both are LIFO
+        this.rotorStackLeftToRight = new ArrayDeque<>(); // Stack is thread-safe, ArrayDeque is not. Both are LIFO
         this.startingCharacters = new ArrayList<>();
         this.machineABCMap = new HashMap<>();
         for (int i = 0; i < machineABC.length(); i++) {
@@ -34,6 +35,16 @@
         }
     }
 
+    @Override
+    public HashMap<Integer, Rotor> getRotors() {
+        return this.rotors;
+    }
+
+    @Override
+    public String getMachineABC() {
+        return this.machineABC;
+    }
+    @Override
     public char activate(char input) {
 
         //rotate the first rotor
@@ -49,12 +60,14 @@
         return plugBoard.returnCharacterPair(temp);
     }
 
+    @Override
     public void setSelectedRotors(List<Integer> rotorsIDInorder, List<Character> startingPositions) throws InvalidStartingCharacters, InvalidRotorException {
         checkSelectedRotors(rotorsIDInorder);
         this.selectedRotors = rotorsIDInorder;
         setStartingCharacters(startingPositions);
     }
 
+    @Override
     public void setStartingCharacters(List<Character> startingCharacters) throws InvalidStartingCharacters {
         checkStartingCharacters(startingCharacters);
         this.rotorStackLeftToRight.clear();
@@ -74,6 +87,11 @@
         this.selectedReflector = reflectors.get(selectedReflectorID);
     }
 
+    public void setPlugBoard(PlugBoard plugBoard) {
+        this.plugBoard = plugBoard;
+    }
+
+    @Override
     public void reset() {
         this.selectedRotors.forEach(rotorID -> this.rotors.get(rotorID).resetRotor());
         try {
@@ -83,7 +101,7 @@
         }
     }
 
-    private int runRotorPipelineStack(Stack<Rotor> pipelineStack, Stack<Rotor> stackToBeFilled, int index, Rotor.Direction dir) {
+    private int runRotorPipelineStack(Deque<Rotor> pipelineStack, Deque<Rotor> stackToBeFilled, int index, Rotor.Direction dir) {
         int outputIndex = index;
         while (!pipelineStack.isEmpty()) {
             outputIndex = pipelineStack.peek().getOutputIndex(outputIndex, dir);
@@ -112,8 +130,13 @@
         if (startingCharacters.stream().anyMatch(c -> !this.machineABCMap.containsKey(c))) {
             throw new InvalidStartingCharacters("Starting characters must be valid");
         }
+        // TODO: is this useless?
+        for (char c : startingCharacters) {
+            if (this.machineABC.contains(String.valueOf(c)) == false) {
+                throw new InvalidStartingCharacters("'" + c + "' does not appear in the machine abc.");
+            }
+        }
     }
-
     private void checkSelectedRotors(List<Integer> rotorsIDs) throws InvalidRotorException {
         if(rotorsIDs.size() > rotors.size()) {
             throw new InvalidRotorException("Too many rotors selected");
Index: UI/src/consoleApp/exceptions/InputMisMatchException.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/UI/src/consoleApp/exceptions/InputMisMatchException.java b/UI/src/consoleApp/exceptions/InputMisMatchException.java
new file mode 100644
--- /dev/null	(date 1660322476283)
+++ b/UI/src/consoleApp/exceptions/InputMisMatchException.java	(date 1660322476283)
@@ -0,0 +1,7 @@
+package consoleApp.exceptions;
+
+public class InputMisMatchException extends Exception {
+    public InputMisMatchException(String message) {
+        super(message);
+    }
+}
Index: src/enigmaEngine/schemaBinding/ObjectFactory.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/enigmaEngine/schemaBinding/ObjectFactory.java b/Engine/src/enigmaEngine/schemaBinding/ObjectFactory.java
rename from src/enigmaEngine/schemaBinding/ObjectFactory.java
rename to Engine/src/enigmaEngine/schemaBinding/ObjectFactory.java
--- a/src/enigmaEngine/schemaBinding/ObjectFactory.java	(revision 456a367a7a579f9a14793435c5402d6bcd0da362)
+++ b/Engine/src/enigmaEngine/schemaBinding/ObjectFactory.java	(date 1660249768163)
@@ -18,7 +18,7 @@
  * <p>An ObjectFactory allows you to programatically 
  * construct new instances of the Java representation 
  * for XML content. The Java representation of XML 
- * content can consist of schema derived interfaces 
+ * content can consist of schema derived enigmaEngine.interfaces
  * and classes representing the binding of schema 
  * type definitions, element declarations and model 
  * groups.  Factory methods for each of these are 
Index: src/enigmaEngine/EnigmaMachineToDebug.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/enigmaEngine/EnigmaMachineToDebug.java b/Engine/src/enigmaEngine/EnigmaMachineToDebug.java
rename from src/enigmaEngine/EnigmaMachineToDebug.java
rename to Engine/src/enigmaEngine/EnigmaMachineToDebug.java
--- a/src/enigmaEngine/EnigmaMachineToDebug.java	(revision 456a367a7a579f9a14793435c5402d6bcd0da362)
+++ b/Engine/src/enigmaEngine/EnigmaMachineToDebug.java	(date 1660251616544)
@@ -1,6 +1,6 @@
 package enigmaEngine;
 
-import enigmaEngine.impl.EnigmaEngine;
+import enigmaEngine.impl.EnigmaEngineImpl;
 import enigmaEngine.impl.PlugBoardImpl;
 import enigmaEngine.impl.ReflectorImpl;
 import enigmaEngine.impl.RotorImpl;
@@ -13,7 +13,7 @@
 
 public class EnigmaMachineToDebug implements InitializeEnigma {
     @Override
-    public EnigmaEngine getEnigmaEngineFromSource(String source) {
+    public EnigmaEngineImpl getEnigmaEngineFromSource(String source) {
         String abc = new String("ABCDEFGHIJKL");
         HashMap<Integer, Rotor> rotors = new HashMap<>();
         HashMap<Reflector.ReflectorID, Reflector> reflectors = new HashMap<>();
@@ -60,7 +60,7 @@
         reflectors.put(Reflector.ReflectorID.I, new ReflectorImpl(Pairs1, Reflector.ReflectorID.I));
         reflectors.put(Reflector.ReflectorID.II, new ReflectorImpl(Pairs2, Reflector.ReflectorID.II));
 
-        return new EnigmaEngine(rotors, reflectors, plugBoard, abc);
+        return new EnigmaEngineImpl(rotors, reflectors, plugBoard, abc);
     }
 
     private ArrayList<Character> stringToArrayList(String input) {
Index: UI/src/consoleApp/impl/Console.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/UI/src/consoleApp/impl/Console.java b/UI/src/consoleApp/impl/Console.java
new file mode 100644
--- /dev/null	(date 1660328626954)
+++ b/UI/src/consoleApp/impl/Console.java	(date 1660328626954)
@@ -0,0 +1,137 @@
+package consoleApp.impl;
+
+import consoleApp.interfaces.Input;
+import enigmaEngine.exceptions.InvalidABCException;
+import enigmaEngine.exceptions.InvalidReflectorException;
+import enigmaEngine.exceptions.InvalidRotorException;
+import enigmaEngine.exceptions.UnknownSourceException;
+import enigmaEngine.interfaces.EnigmaEngine;
+import enigmaEngine.interfaces.Rotor;
+import immutables.userInterface.InitCode;
+
+import javax.xml.bind.JAXBException;
+import java.io.FileNotFoundException;
+import java.util.ArrayList;
+import java.util.HashMap;
+import java.util.List;
+import java.util.Scanner;
+
+public class Console implements Input {
+
+    private Scanner scanner;
+    private EnigmaEngine machine;
+    private int numOfDecryptions;
+    private List<String> stringInput;
+    private List<String> stringOutput;
+    private List<Integer> timeStamps;
+
+    public Console() {
+        this.scanner = new Scanner(System.in);
+        this.machine = null;
+        this.numOfDecryptions = 0;
+        this.stringInput = null;
+        this.stringOutput = null;
+        this.timeStamps = null;
+    }
+
+    public Scanner getScanner() {
+        return scanner;
+    }
+
+    public Console(EnigmaEngine machine) {
+        this.machine = machine;
+        this.stringInput = null;
+        this.stringOutput = null;
+        this.timeStamps = null;
+    }
+
+    @Override
+    public void readMachineFromXMLFile() throws JAXBException, InvalidRotorException, FileNotFoundException, InvalidABCException, UnknownSourceException, InvalidReflectorException {
+        System.out.println("Enter a valid full path to your file, including file name and its file extension.");
+        try {
+            String path = this.scanner.nextLine();
+            EnigmaEngine newMachine = new immutables.userInterface.GetSource(path).getEngine();
+            this.machine = newMachine;
+        } catch(Exception e) {
+            // TODO: add error message, etc... Prevent machine for being overwritten
+        }
+    }
+
+    @Override
+    public void getMachineSpecs() {
+        // TODO: do this
+    }
+
+    @Override
+    public InitCode initializePaperEnigmaCodeManually() {
+        String machineABC = this.machine.getMachineABC();
+        boolean valid1 = false;
+        boolean valid2 = false;
+        boolean valid3 = false;
+        boolean valid4 = false;
+        String selectedRotors = null;
+        String allStartingPositions = null;
+        int reflectorNumber = -1;
+        String allPlugBoardPairs = null;
+
+        selectedRotors = this.scanner.nextLine();
+        allStartingPositions = this.scanner.nextLine();
+        System.out.println("Enter your desired reflector ID.");
+        do {
+            try {
+                reflectorNumber = Integer.parseInt(this.scanner.nextLine());
+                valid3 = true;
+            } catch (NumberFormatException e) {
+                System.out.println("Please enter a single-digit from one of the numbers above, without other letters.");
+                valid3 = false;
+            }
+        } while (valid3 == false);
+        do {
+            allPlugBoardPairs = this.scanner.nextLine().trim();
+            valid4 = (allPlugBoardPairs.length() % 2 == 1);
+            if (valid4 == false) {
+                System.out.println("Given plug board pairs does not contain even number of ABC characters. Try again please.");
+            }
+        } while (valid4 == false);
+
+        return new InitCode(selectedRotors, allStartingPositions, reflectorNumber, allPlugBoardPairs, getAllNotches());
+    }
+
+    private List<Integer> getAllNotches() {
+        HashMap<Integer, Rotor> allRotors = this.machine.getRotors();
+        List<Integer> allNotches = new ArrayList<>();
+
+        for (int i = 0; i < allRotors.size(); i++) {
+            allNotches.add(allRotors.get(i).getNotch());
+        }
+
+        return allNotches;
+    }
+
+    @Override
+    public void initializePaperEnigmaCodeAutomatically() {
+
+    }
+
+    @Override
+    public void encryptInput() {
+
+    }
+
+    @Override
+    // Reset last
+    public void resetMachine() {
+        // TODO: reset manual or automatic paper enigma code
+
+    }
+
+    @Override
+    public void getMachineStatisticsAndHistory() {
+
+    }
+
+    @Override
+    public void exitMachine() {
+        // Does nothing
+    }
+}
Index: UI/src/consoleApp/Main.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/UI/src/consoleApp/Main.java b/UI/src/consoleApp/Main.java
new file mode 100644
--- /dev/null	(date 1660351359430)
+++ b/UI/src/consoleApp/Main.java	(date 1660351359430)
@@ -0,0 +1,97 @@
+package consoleApp;
+
+import consoleApp.impl.Console;
+import enigmaEngine.exceptions.InvalidABCException;
+import enigmaEngine.exceptions.InvalidReflectorException;
+import enigmaEngine.exceptions.InvalidRotorException;
+import enigmaEngine.exceptions.UnknownSourceException;
+
+import javax.xml.bind.JAXBException;
+import java.io.FileNotFoundException;
+
+public class Main {
+    public enum Choice {
+        CHOICE_ONE,
+        CHOICE_TWO,
+        CHOICE_THREE,
+        CHOICE_FOUR,
+        CHOICE_FIVE,
+        CHOICE_SIX,
+        CHOICE_SEVEN,
+        CHOICE_EIGHT
+    }
+
+    public static void main(String[] args) throws JAXBException, InvalidRotorException, FileNotFoundException, InvalidABCException, UnknownSourceException, InvalidReflectorException {
+        Console consoleApp = new Console();
+        Choice userChoice = null;
+
+        greetUser();
+        do {
+            showMenu();
+            boolean validInput = false;
+            do {
+                try {
+                    int input = Integer.parseInt(consoleApp.getScanner().nextLine());
+                    if (input < 1 || 9 <= input) {
+                        throw new IllegalArgumentException();
+                    }
+                    userChoice = Choice.values()[input - 1];
+                    validInput = true;
+                } catch (NumberFormatException e) {
+                    System.out.println("Please enter numeric value.");
+                } catch (IllegalArgumentException e) {
+                    System.out.println("Please enter a single-digit from one of the numbers above.");
+                }
+            } while (validInput == false);
+
+            switch(userChoice) {
+                case CHOICE_ONE: {
+                    consoleApp.readMachineFromXMLFile();
+                    break;
+                }
+                case CHOICE_TWO: {
+                    consoleApp.getMachineSpecs();
+                    break;
+                }
+                case CHOICE_THREE: {
+                    break;
+                }
+                case CHOICE_FOUR: {
+                    break;
+                }
+                case CHOICE_FIVE: {
+                    break;
+                }
+                case CHOICE_SIX: {
+                    break;
+                }
+                case CHOICE_SEVEN: {
+
+                    break;
+                }
+                case CHOICE_EIGHT: {
+                    System.out.println("Goodbye!");
+                    break;
+                }
+            }
+        } while (userChoice != userChoice.CHOICE_EIGHT);
+    }
+
+    public static void greetUser() {
+        System.out.println("Hello dear user!");
+        System.out.println("Welcome to the C.T.E game.");
+        System.out.println("From now on, showtime.");
+        System.out.println("Here are all your options during this game:");
+
+    }
+    public static void showMenu() {
+        System.out.println("1. Load a XML file by giving a full file path.");
+        System.out.println("2. Get your full Enigma machine engine specifications.");
+        System.out.println("3. Choose Enigma engine code.");
+        System.out.println("4. Generate your Enigma engine code automatically.");
+        System.out.println("5. Decrypt input by your Enigma engine.");
+        System.out.println("6. Reset current Enigma engine code.");
+        System.out.println("7. Reveal descriptive statistics.");
+        System.out.println("8. Exit the C.T.E game.");
+    }
+}
Index: .idea/modules.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"ProjectModuleManager\">\r\n    <modules>\r\n      <module fileurl=\"file://$PROJECT_DIR$/Ex1/ConsoleUI/ConsoleUI.iml\" filepath=\"$PROJECT_DIR$/Ex1/ConsoleUI/ConsoleUI.iml\" />\r\n      <module fileurl=\"file://$PROJECT_DIR$/EnigmaMachine.iml\" filepath=\"$PROJECT_DIR$/EnigmaMachine.iml\" />\r\n    </modules>\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/modules.xml b/.idea/modules.xml
--- a/.idea/modules.xml	(revision 456a367a7a579f9a14793435c5402d6bcd0da362)
+++ b/.idea/modules.xml	(date 1660296776354)
@@ -3,7 +3,10 @@
   <component name="ProjectModuleManager">
     <modules>
       <module fileurl="file://$PROJECT_DIR$/Ex1/ConsoleUI/ConsoleUI.iml" filepath="$PROJECT_DIR$/Ex1/ConsoleUI/ConsoleUI.iml" />
+      <module fileurl="file://$PROJECT_DIR$/DTO/DTO.iml" filepath="$PROJECT_DIR$/DTO/DTO.iml" />
+      <module fileurl="file://$PROJECT_DIR$/Engine/Engine.iml" filepath="$PROJECT_DIR$/Engine/Engine.iml" />
       <module fileurl="file://$PROJECT_DIR$/EnigmaMachine.iml" filepath="$PROJECT_DIR$/EnigmaMachine.iml" />
+      <module fileurl="file://$PROJECT_DIR$/UI/UI.iml" filepath="$PROJECT_DIR$/UI/UI.iml" />
     </modules>
   </component>
 </project>
\ No newline at end of file
Index: DTO/src/immutables/engine/EngineDTO.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/DTO/src/immutables/engine/EngineDTO.java b/DTO/src/immutables/engine/EngineDTO.java
new file mode 100644
--- /dev/null	(date 1660318638429)
+++ b/DTO/src/immutables/engine/EngineDTO.java	(date 1660318638429)
@@ -0,0 +1,6 @@
+package immutables.engine;
+
+// Engine->DTO->UI
+public class EngineDTO {
+
+}
Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"ChangeListManager\">\r\n    <list default=\"true\" id=\"9079e32c-6cbe-4879-9ffd-a1fd4b1b9fc3\" name=\"Changes\" comment=\"added exceptions and checking for starting characters\">\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/workspace.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/workspace.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/enigmaEngine/Main.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/enigmaEngine/Main.java\" afterDir=\"false\" />\r\n    </list>\r\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\r\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\r\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\r\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\r\n  </component>\r\n  <component name=\"FileTemplateManagerImpl\">\r\n    <option name=\"RECENT_TEMPLATES\">\r\n      <list>\r\n        <option value=\"Interface\" />\r\n        <option value=\"Class\" />\r\n      </list>\r\n    </option>\r\n  </component>\r\n  <component name=\"Git.Settings\">\r\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$\" />\r\n  </component>\r\n  <component name=\"MarkdownSettingsMigration\">\r\n    <option name=\"stateVersion\" value=\"1\" />\r\n  </component>\r\n  <component name=\"ProblemsViewState\">\r\n    <option name=\"selectedTabId\" value=\"CurrentFile\" />\r\n  </component>\r\n  <component name=\"ProjectId\" id=\"2CsoWGyDLiEPke6jv4nSACzbJvJ\" />\r\n  <component name=\"ProjectLevelVcsManager\" settingsEditedManually=\"true\">\r\n    <ConfirmationsSetting value=\"2\" id=\"Add\" />\r\n  </component>\r\n  <component name=\"ProjectViewState\">\r\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\r\n    <option name=\"showLibraryContents\" value=\"true\" />\r\n  </component>\r\n  <component name=\"PropertiesComponent\">{\r\n  &quot;keyToString&quot;: {\r\n    &quot;RunOnceActivity.OpenProjectViewOnStart&quot;: &quot;true&quot;,\r\n    &quot;RunOnceActivity.ShowReadmeOnStart&quot;: &quot;true&quot;,\r\n    &quot;SHARE_PROJECT_CONFIGURATION_FILES&quot;: &quot;true&quot;,\r\n    &quot;WebServerToolWindowFactoryState&quot;: &quot;false&quot;,\r\n    &quot;extract.method.default.visibility&quot;: &quot;private&quot;,\r\n    &quot;jdk.selected.JAVA_MODULE&quot;: &quot;openjdk-18&quot;,\r\n    &quot;last_opened_file_path&quot;: &quot;C:/Users/idano/IdeaProjects/EnigmaMachine&quot;,\r\n    &quot;project.structure.last.edited&quot;: &quot;Project&quot;,\r\n    &quot;project.structure.proportion&quot;: &quot;0.15&quot;,\r\n    &quot;project.structure.side.proportion&quot;: &quot;0.2&quot;,\r\n    &quot;settings.editor.selected.configurable&quot;: &quot;preferences.keymap&quot;\r\n  }\r\n}</component>\r\n  <component name=\"RecentsManager\">\r\n    <key name=\"CreateClassDialog.RecentsKey\">\r\n      <recent name=\"enigmaEngine\" />\r\n    </key>\r\n    <key name=\"MoveFile.RECENT_KEYS\">\r\n      <recent name=\"C:\\Users\\idano\\IdeaProjects\\EnigmaMachine\\src\\Resources\" />\r\n      <recent name=\"C:\\Users\\idano\\IdeaProjects\\EnigmaMachine\" />\r\n    </key>\r\n  </component>\r\n  <component name=\"RunManager\">\r\n    <configuration name=\"enigmaEngine.Main\" type=\"Application\" factoryName=\"Application\" temporary=\"true\" nameIsGenerated=\"true\">\r\n      <option name=\"MAIN_CLASS_NAME\" value=\"enigmaEngine.Main\" />\r\n      <module name=\"EnigmaMachine\" />\r\n      <extension name=\"coverage\">\r\n        <pattern>\r\n          <option name=\"PATTERN\" value=\"enigmaEngine.exceptions.*\" />\r\n          <option name=\"ENABLED\" value=\"true\" />\r\n        </pattern>\r\n      </extension>\r\n      <method v=\"2\">\r\n        <option name=\"Make\" enabled=\"true\" />\r\n      </method>\r\n    </configuration>\r\n    <recent_temporary>\r\n      <list>\r\n        <item itemvalue=\"Application.enigmaEngine.Main\" />\r\n      </list>\r\n    </recent_temporary>\r\n  </component>\r\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"application-level\" UseSingleDictionary=\"true\" transferred=\"true\" />\r\n  <component name=\"TaskManager\">\r\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\r\n      <changelist id=\"9079e32c-6cbe-4879-9ffd-a1fd4b1b9fc3\" name=\"Changes\" comment=\"\" />\r\n      <created>1659600687681</created>\r\n      <option name=\"number\" value=\"Default\" />\r\n      <option name=\"presentableId\" value=\"Default\" />\r\n      <updated>1659600687681</updated>\r\n      <workItem from=\"1659600689401\" duration=\"5889000\" />\r\n      <workItem from=\"1659873169422\" duration=\"359000\" />\r\n      <workItem from=\"1659873879911\" duration=\"12582000\" />\r\n      <workItem from=\"1659991079351\" duration=\"60000\" />\r\n      <workItem from=\"1659991150570\" duration=\"1989000\" />\r\n      <workItem from=\"1659994007600\" duration=\"70000\" />\r\n      <workItem from=\"1659994090197\" duration=\"6309000\" />\r\n    </task>\r\n    <task id=\"LOCAL-00001\" summary=\"test\">\r\n      <created>1659601196558</created>\r\n      <option name=\"number\" value=\"00001\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00001\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1659601196558</updated>\r\n    </task>\r\n    <task id=\"LOCAL\u200E00002\" summary=\"update rotor test\">\r\n      <created>1659608975600</created>\r\n      <option name=\"number\" value=\"LOCAL\u200E00002\" />\r\n      <option name=\"presentableId\" value=\"LOCAL\u200E00002\" />\r\n      <updated>1659608975600</updated>\r\n    </task>\r\n    <task id=\"LOCAL\u200E00003\" summary=\"update rotor test\">\r\n      <created>1659619876038</created>\r\n      <option name=\"number\" value=\"LOCAL\u200E00003\" />\r\n      <option name=\"presentableId\" value=\"LOCAL\u200E00003\" />\r\n      <updated>1659619876038</updated>\r\n    </task>\r\n    <task id=\"LOCAL\u200E00004\" summary=\"update rotor test\">\r\n      <created>1659624208492</created>\r\n      <option name=\"number\" value=\"LOCAL\u200E00004\" />\r\n      <option name=\"presentableId\" value=\"LOCAL\u200E00004\" />\r\n      <updated>1659624208492</updated>\r\n    </task>\r\n    <task id=\"LOCAL\u200E00005\" summary=\"update rotor test\">\r\n      <created>1659625578861</created>\r\n      <option name=\"number\" value=\"LOCAL\u200E00005\" />\r\n      <option name=\"presentableId\" value=\"LOCAL\u200E00005\" />\r\n      <updated>1659625578861</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00006\" summary=\"added initialization of the stacks\">\r\n      <created>1659994504227</created>\r\n      <option name=\"number\" value=\"00006\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00006\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1659994504227</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00007\" summary=\"Added reset Engine\">\r\n      <created>1660168628296</created>\r\n      <option name=\"number\" value=\"00007\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00007\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1660168628296</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00008\" summary=\"added exceptions and checking for starting characters\">\r\n      <created>1660174804940</created>\r\n      <option name=\"number\" value=\"00008\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00008\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1660174804940</updated>\r\n    </task>\r\n    <option name=\"localTasksCounter\" value=\"9\" />\r\n    <servers />\r\n  </component>\r\n  <component name=\"TypeScriptGeneratedFilesManager\">\r\n    <option name=\"version\" value=\"3\" />\r\n  </component>\r\n  <component name=\"Vcs.Log.Tabs.Properties\">\r\n    <option name=\"TAB_STATES\">\r\n      <map>\r\n        <entry key=\"MAIN\">\r\n          <value>\r\n            <State />\r\n          </value>\r\n        </entry>\r\n      </map>\r\n    </option>\r\n  </component>\r\n  <component name=\"VcsManagerConfiguration\">\r\n    <MESSAGE value=\"test\" />\r\n    <MESSAGE value=\"update rotor test\" />\r\n    <MESSAGE value=\"added initialization of the stacks\" />\r\n    <MESSAGE value=\"Added reset Engine\" />\r\n    <MESSAGE value=\"added exceptions and checking for starting characters\" />\r\n    <option name=\"LAST_COMMIT_MESSAGE\" value=\"added exceptions and checking for starting characters\" />\r\n  </component>\r\n  <component name=\"XDebuggerManager\">\r\n    <pin-to-top-manager>\r\n      <pinned-members>\r\n        <PinnedItemInfo parentTag=\"enigmaEngine.impl.EnigmaEngine\" memberName=\"rotorStackRightToLeft\" />\r\n        <PinnedItemInfo parentTag=\"enigmaEngine.impl.RotorImpl\" memberName=\"countRotations\" />\r\n      </pinned-members>\r\n    </pin-to-top-manager>\r\n    <watches-manager>\r\n      <configuration name=\"Application\">\r\n        <watch expression=\"((RotorImpl)enigmaEngine.rotorStackRightToLeft.get(0)).countRotations\" custom=\"enigmaEngine.impl.RotorImpl\" />\r\n        <watch expression=\"((RotorImpl)enigmaEngine.rotorStackRightToLeft.get(1)).countRotations\" custom=\"enigmaEngine.impl.RotorImpl\" />\r\n        <watch expression=\"((RotorImpl)enigmaEngine.rotorStackRightToLeft.get(0)).rightSide\" custom=\"enigmaEngine.impl.RotorImpl\" />\r\n        <watch expression=\"((RotorImpl)enigmaEngine.rotorStackRightToLeft.get(0)).leftSide\" custom=\"enigmaEngine.impl.RotorImpl\" />\r\n        <watch expression=\"((RotorImpl)enigmaEngine.rotorStackRightToLeft.get(1)).rightSide\" custom=\"enigmaEngine.impl.RotorImpl\" />\r\n        <watch expression=\"((RotorImpl)enigmaEngine.rotorStackRightToLeft.get(1)).leftSide\" custom=\"enigmaEngine.impl.RotorImpl\" />\r\n        <watch expression=\"((HashMap)((EnigmaEngine)this).rotors).entrySet().toArray()[1]\" custom=\"enigmaEngine.impl.EnigmaEngine,java.util.HashMap\" />\r\n      </configuration>\r\n    </watches-manager>\r\n  </component>\r\n  <component name=\"XSLT-Support.FileAssociations.UIState\">\r\n    <expand />\r\n    <select />\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/workspace.xml b/.idea/workspace.xml
--- a/.idea/workspace.xml	(revision 456a367a7a579f9a14793435c5402d6bcd0da362)
+++ b/.idea/workspace.xml	(date 1660387929891)
@@ -1,14 +1,60 @@
 <?xml version="1.0" encoding="UTF-8"?>
 <project version="4">
   <component name="ChangeListManager">
-    <list default="true" id="9079e32c-6cbe-4879-9ffd-a1fd4b1b9fc3" name="Changes" comment="added exceptions and checking for starting characters">
+    <list default="true" id="9079e32c-6cbe-4879-9ffd-a1fd4b1b9fc3" name="Changes" comment="update rotor test">
+      <change afterPath="$PROJECT_DIR$/DTO/src/immutables/engine/EngineDTO.java" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/DTO/src/immutables/userInterface/GetSource.java" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/DTO/src/immutables/userInterface/InitCode.java" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/Engine/Engine.iml" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/Engine/src/Resources/PairClass.java" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/Engine/src/enigmaEngine/exceptions/UnknownSourceException.java" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/Engine/src/enigmaEngine/interfaces/EnigmaEngine.java" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/UI/UI.iml" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/UI/src/consoleApp/Main.java" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/UI/src/consoleApp/exceptions/InputMisMatchException.java" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/UI/src/consoleApp/impl/Console.java" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/UI/src/consoleApp/interfaces/Input.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/.idea/modules.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/modules.xml" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/src/enigmaEngine/Main.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/enigmaEngine/Main.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/Resources/Enigma-Ex1.xsd" beforeDir="false" afterPath="$PROJECT_DIR$/Engine/src/Resources/Enigma-Ex1.xsd" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/Resources/ex1-sanity-small.xml" beforeDir="false" afterPath="$PROJECT_DIR$/Engine/src/Resources/ex1-sanity-small.xml" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/enigmaEngine/CreateAndValidateEnigmaComponentsImpl.java" beforeDir="false" afterPath="$PROJECT_DIR$/Engine/src/enigmaEngine/CreateAndValidateEnigmaComponentsImpl.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/enigmaEngine/EnigmaMachineFromXML.java" beforeDir="false" afterPath="$PROJECT_DIR$/Engine/src/enigmaEngine/EnigmaMachineFromXML.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/enigmaEngine/EnigmaMachineToDebug.java" beforeDir="false" afterPath="$PROJECT_DIR$/Engine/src/enigmaEngine/EnigmaMachineToDebug.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/enigmaEngine/InitializeEnigmaEngine.java" beforeDir="false" afterPath="$PROJECT_DIR$/Engine/src/enigmaEngine/InitializeEnigmaEngine.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/enigmaEngine/Main.java" beforeDir="false" afterPath="$PROJECT_DIR$/Engine/src/enigmaEngine/Main.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/enigmaEngine/Tests" beforeDir="false" afterPath="$PROJECT_DIR$/Engine/src/enigmaEngine/Tests" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/enigmaEngine/exceptions/InvalidABCException.java" beforeDir="false" afterPath="$PROJECT_DIR$/Engine/src/enigmaEngine/exceptions/InvalidABCException.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/enigmaEngine/exceptions/InvalidReflectorException.java" beforeDir="false" afterPath="$PROJECT_DIR$/Engine/src/enigmaEngine/exceptions/InvalidReflectorException.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/enigmaEngine/exceptions/InvalidRotorException.java" beforeDir="false" afterPath="$PROJECT_DIR$/Engine/src/enigmaEngine/exceptions/InvalidRotorException.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/enigmaEngine/exceptions/InvalidStartingCharacters.java" beforeDir="false" afterPath="$PROJECT_DIR$/Engine/src/enigmaEngine/exceptions/InvalidStartingCharacters.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/enigmaEngine/impl/EnigmaEngine.java" beforeDir="false" afterPath="$PROJECT_DIR$/Engine/src/enigmaEngine/impl/EnigmaEngineImpl.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/enigmaEngine/impl/PlugBoardImpl.java" beforeDir="false" afterPath="$PROJECT_DIR$/Engine/src/enigmaEngine/impl/PlugBoardImpl.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/enigmaEngine/impl/ReflectorImpl.java" beforeDir="false" afterPath="$PROJECT_DIR$/Engine/src/enigmaEngine/impl/ReflectorImpl.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/enigmaEngine/impl/RotorImpl.java" beforeDir="false" afterPath="$PROJECT_DIR$/Engine/src/enigmaEngine/impl/RotorImpl.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/enigmaEngine/interfaces/CreateAndValidateEnigmaComponents.java" beforeDir="false" afterPath="$PROJECT_DIR$/Engine/src/enigmaEngine/interfaces/CreateAndValidateEnigmaComponents.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/enigmaEngine/interfaces/InitializeEnigma.java" beforeDir="false" afterPath="$PROJECT_DIR$/Engine/src/enigmaEngine/interfaces/InitializeEnigma.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/enigmaEngine/interfaces/PlugBoard.java" beforeDir="false" afterPath="$PROJECT_DIR$/Engine/src/enigmaEngine/interfaces/PlugBoard.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/enigmaEngine/interfaces/Reflector.java" beforeDir="false" afterPath="$PROJECT_DIR$/Engine/src/enigmaEngine/interfaces/Reflector.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/enigmaEngine/interfaces/Rotatable.java" beforeDir="false" afterPath="$PROJECT_DIR$/Engine/src/enigmaEngine/interfaces/Rotatable.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/enigmaEngine/interfaces/Rotor.java" beforeDir="false" afterPath="$PROJECT_DIR$/Engine/src/enigmaEngine/interfaces/Rotor.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/enigmaEngine/schemaBinding/CTEEnigma.java" beforeDir="false" afterPath="$PROJECT_DIR$/Engine/src/enigmaEngine/schemaBinding/CTEEnigma.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/enigmaEngine/schemaBinding/CTEMachine.java" beforeDir="false" afterPath="$PROJECT_DIR$/Engine/src/enigmaEngine/schemaBinding/CTEMachine.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/enigmaEngine/schemaBinding/CTEPositioning.java" beforeDir="false" afterPath="$PROJECT_DIR$/Engine/src/enigmaEngine/schemaBinding/CTEPositioning.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/enigmaEngine/schemaBinding/CTEReflect.java" beforeDir="false" afterPath="$PROJECT_DIR$/Engine/src/enigmaEngine/schemaBinding/CTEReflect.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/enigmaEngine/schemaBinding/CTEReflector.java" beforeDir="false" afterPath="$PROJECT_DIR$/Engine/src/enigmaEngine/schemaBinding/CTEReflector.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/enigmaEngine/schemaBinding/CTEReflectors.java" beforeDir="false" afterPath="$PROJECT_DIR$/Engine/src/enigmaEngine/schemaBinding/CTEReflectors.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/enigmaEngine/schemaBinding/CTERotor.java" beforeDir="false" afterPath="$PROJECT_DIR$/Engine/src/enigmaEngine/schemaBinding/CTERotor.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/enigmaEngine/schemaBinding/CTERotors.java" beforeDir="false" afterPath="$PROJECT_DIR$/Engine/src/enigmaEngine/schemaBinding/CTERotors.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/enigmaEngine/schemaBinding/ObjectFactory.java" beforeDir="false" afterPath="$PROJECT_DIR$/Engine/src/enigmaEngine/schemaBinding/ObjectFactory.java" afterDir="false" />
     </list>
     <option name="SHOW_DIALOG" value="false" />
     <option name="HIGHLIGHT_CONFLICTS" value="true" />
     <option name="HIGHLIGHT_NON_ACTIVE_CHANGELIST" value="false" />
     <option name="LAST_RESOLUTION" value="IGNORE" />
+  </component>
+  <component name="CodeInsightWorkspaceSettings">
+    <option name="optimizeImportsOnTheFly" value="true" />
   </component>
   <component name="FileTemplateManagerImpl">
     <option name="RECENT_TEMPLATES">
@@ -35,23 +81,27 @@
     <option name="hideEmptyMiddlePackages" value="true" />
     <option name="showLibraryContents" value="true" />
   </component>
-  <component name="PropertiesComponent">{
-  &quot;keyToString&quot;: {
-    &quot;RunOnceActivity.OpenProjectViewOnStart&quot;: &quot;true&quot;,
-    &quot;RunOnceActivity.ShowReadmeOnStart&quot;: &quot;true&quot;,
-    &quot;SHARE_PROJECT_CONFIGURATION_FILES&quot;: &quot;true&quot;,
-    &quot;WebServerToolWindowFactoryState&quot;: &quot;false&quot;,
-    &quot;extract.method.default.visibility&quot;: &quot;private&quot;,
-    &quot;jdk.selected.JAVA_MODULE&quot;: &quot;openjdk-18&quot;,
-    &quot;last_opened_file_path&quot;: &quot;C:/Users/idano/IdeaProjects/EnigmaMachine&quot;,
-    &quot;project.structure.last.edited&quot;: &quot;Project&quot;,
-    &quot;project.structure.proportion&quot;: &quot;0.15&quot;,
-    &quot;project.structure.side.proportion&quot;: &quot;0.2&quot;,
-    &quot;settings.editor.selected.configurable&quot;: &quot;preferences.keymap&quot;
+  <component name="PropertiesComponent"><![CDATA[{
+  "keyToString": {
+    "RunOnceActivity.OpenProjectViewOnStart": "true",
+    "RunOnceActivity.ShowReadmeOnStart": "true",
+    "SHARE_PROJECT_CONFIGURATION_FILES": "true",
+    "WebServerToolWindowFactoryState": "false",
+    "create.test.in.the.same.root": "true",
+    "extract.method.default.visibility": "private",
+    "jdk.selected.JAVA_MODULE": "1.8 (2)",
+    "last_directory_selection": "C:/Users/guybe/IdeaProjects/EnigmaMachine/UI/src/enigmaEngine/impl",
+    "last_opened_file_path": "C:/Users/guybe/Downloads/javafx-sdk-18.0.2",
+    "nodejs_package_manager_path": "npm",
+    "project.structure.last.edited": "SDKs",
+    "project.structure.proportion": "0.15",
+    "project.structure.side.proportion": "0.2",
+    "settings.editor.selected.configurable": "configurable.group.editor"
   }
-}</component>
+}]]></component>
   <component name="RecentsManager">
     <key name="CreateClassDialog.RecentsKey">
+      <recent name="consoleApp" />
       <recent name="enigmaEngine" />
     </key>
     <key name="MoveFile.RECENT_KEYS">
@@ -59,13 +109,39 @@
       <recent name="C:\Users\idano\IdeaProjects\EnigmaMachine" />
     </key>
   </component>
-  <component name="RunManager">
-    <configuration name="enigmaEngine.Main" type="Application" factoryName="Application" temporary="true" nameIsGenerated="true">
+  <component name="RunManager" selected="Application.enigmaEngine.Main">
+    <configuration name="Main" type="Application" factoryName="Application" temporary="true" nameIsGenerated="true">
       <option name="MAIN_CLASS_NAME" value="enigmaEngine.Main" />
       <module name="EnigmaMachine" />
       <extension name="coverage">
         <pattern>
-          <option name="PATTERN" value="enigmaEngine.exceptions.*" />
+          <option name="PATTERN" value="enigmaEngine.*" />
+          <option name="ENABLED" value="true" />
+        </pattern>
+      </extension>
+      <method v="2">
+        <option name="Make" enabled="true" />
+      </method>
+    </configuration>
+    <configuration name="consoleApp.Main" type="Application" factoryName="Application" temporary="true" nameIsGenerated="true">
+      <option name="MAIN_CLASS_NAME" value="consoleApp.Main" />
+      <module name="UI" />
+      <extension name="coverage">
+        <pattern>
+          <option name="PATTERN" value="consoleApp.*" />
+          <option name="ENABLED" value="true" />
+        </pattern>
+      </extension>
+      <method v="2">
+        <option name="Make" enabled="true" />
+      </method>
+    </configuration>
+    <configuration name="enigmaEngine.Main" type="Application" factoryName="Application" temporary="true" nameIsGenerated="true">
+      <option name="MAIN_CLASS_NAME" value="enigmaEngine.Main" />
+      <module name="Engine" />
+      <extension name="coverage">
+        <pattern>
+          <option name="PATTERN" value="enigmaEngine.*" />
           <option name="ENABLED" value="true" />
         </pattern>
       </extension>
@@ -76,6 +152,7 @@
     <recent_temporary>
       <list>
         <item itemvalue="Application.enigmaEngine.Main" />
+        <item itemvalue="Application.consoleApp.Main" />
       </list>
     </recent_temporary>
   </component>
@@ -94,6 +171,14 @@
       <workItem from="1659991150570" duration="1989000" />
       <workItem from="1659994007600" duration="70000" />
       <workItem from="1659994090197" duration="6309000" />
+      <workItem from="1660247042655" duration="887000" />
+      <workItem from="1660249352008" duration="6706000" />
+      <workItem from="1660296491429" duration="408000" />
+      <workItem from="1660296913494" duration="16225000" />
+      <workItem from="1660317246346" duration="508000" />
+      <workItem from="1660317769726" duration="9956000" />
+      <workItem from="1660331997485" duration="2096000" />
+      <workItem from="1660383046948" duration="3063000" />
     </task>
     <task id="LOCAL-00001" summary="test">
       <created>1659601196558</created>
@@ -140,14 +225,7 @@
       <option name="project" value="LOCAL" />
       <updated>1660168628296</updated>
     </task>
-    <task id="LOCAL-00008" summary="added exceptions and checking for starting characters">
-      <created>1660174804940</created>
-      <option name="number" value="00008" />
-      <option name="presentableId" value="LOCAL-00008" />
-      <option name="project" value="LOCAL" />
-      <updated>1660174804940</updated>
-    </task>
-    <option name="localTasksCounter" value="9" />
+    <option name="localTasksCounter" value="8" />
     <servers />
   </component>
   <component name="TypeScriptGeneratedFilesManager">
@@ -169,10 +247,18 @@
     <MESSAGE value="update rotor test" />
     <MESSAGE value="added initialization of the stacks" />
     <MESSAGE value="Added reset Engine" />
-    <MESSAGE value="added exceptions and checking for starting characters" />
-    <option name="LAST_COMMIT_MESSAGE" value="added exceptions and checking for starting characters" />
+    <option name="LAST_COMMIT_MESSAGE" value="Added reset Engine" />
   </component>
   <component name="XDebuggerManager">
+    <breakpoint-manager>
+      <breakpoints>
+        <line-breakpoint enabled="true" type="java-line">
+          <url>file://$PROJECT_DIR$/Engine/src/enigmaEngine/impl/EnigmaEngineImpl.java</url>
+          <line>50</line>
+          <option name="timeStamp" value="8" />
+        </line-breakpoint>
+      </breakpoints>
+    </breakpoint-manager>
     <pin-to-top-manager>
       <pinned-members>
         <PinnedItemInfo parentTag="enigmaEngine.impl.EnigmaEngine" memberName="rotorStackRightToLeft" />
Index: src/enigmaEngine/interfaces/Rotor.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/enigmaEngine/interfaces/Rotor.java b/Engine/src/enigmaEngine/interfaces/Rotor.java
rename from src/enigmaEngine/interfaces/Rotor.java
rename to Engine/src/enigmaEngine/interfaces/Rotor.java
--- a/src/enigmaEngine/interfaces/Rotor.java	(revision 456a367a7a579f9a14793435c5402d6bcd0da362)
+++ b/Engine/src/enigmaEngine/interfaces/Rotor.java	(date 1660319223267)
@@ -4,6 +4,8 @@
     enum Direction {
         LEFT, RIGHT
     }
+
+    int getNotch();
     int getOutputIndex(int inputIndex, Direction dir);
 
     void setStartIndex(char startCharacter);
Index: src/enigmaEngine/interfaces/PlugBoard.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/enigmaEngine/interfaces/PlugBoard.java b/Engine/src/enigmaEngine/interfaces/PlugBoard.java
rename from src/enigmaEngine/interfaces/PlugBoard.java
rename to Engine/src/enigmaEngine/interfaces/PlugBoard.java
--- a/src/enigmaEngine/interfaces/PlugBoard.java	(revision 456a367a7a579f9a14793435c5402d6bcd0da362)
+++ b/Engine/src/enigmaEngine/interfaces/PlugBoard.java	(date 1660348390773)
@@ -1,13 +1,12 @@
 package enigmaEngine.interfaces;
 
-import javafx.util.Pair;
+import Resources.PairClass;
 
-import java.util.HashMap;
 import java.util.List;
 
 public interface PlugBoard {
     char returnCharacterPair(char character);
-    void UpdatePairs(List<Pair<Character, Character>> pairList);
+    void UpdatePairs(List<PairClass<Character, Character>> pairList);
     void addPair(char a, char b);
 //    HashMap<Character, Character> generateInputIntoPairs(List<Pair<Character,Character>> pairList); // if input = null -> return null
 
Index: src/enigmaEngine/impl/RotorImpl.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/enigmaEngine/impl/RotorImpl.java b/Engine/src/enigmaEngine/impl/RotorImpl.java
rename from src/enigmaEngine/impl/RotorImpl.java
rename to Engine/src/enigmaEngine/impl/RotorImpl.java
--- a/src/enigmaEngine/impl/RotorImpl.java	(revision 456a367a7a579f9a14793435c5402d6bcd0da362)
+++ b/Engine/src/enigmaEngine/impl/RotorImpl.java	(date 1660319196139)
@@ -29,6 +29,11 @@
         this.firstCharacter = rightSide.get(0);
     }
 
+    @Override
+    public int getNotch() {
+        return this.notch;
+    }
+
     @Override
     public int getOutputIndex(int inputIndex, Direction dir) {
         if (dir == Direction.RIGHT) {
Index: Engine/Engine.iml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Engine/Engine.iml b/Engine/Engine.iml
new file mode 100644
--- /dev/null	(date 1660297573005)
+++ b/Engine/Engine.iml	(date 1660297573005)
@@ -0,0 +1,12 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<module type="JAVA_MODULE" version="4">
+  <component name="NewModuleRootManager" inherit-compiler-output="true">
+    <exclude-output />
+    <content url="file://$MODULE_DIR$">
+      <sourceFolder url="file://$MODULE_DIR$/src" isTestSource="false" />
+    </content>
+    <orderEntry type="inheritedJdk" />
+    <orderEntry type="sourceFolder" forTests="false" />
+    <orderEntry type="module" module-name="DTO" exported="" />
+  </component>
+</module>
\ No newline at end of file
Index: Engine/src/Resources/PairClass.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Engine/src/Resources/PairClass.java b/Engine/src/Resources/PairClass.java
new file mode 100644
--- /dev/null	(date 1660386625719)
+++ b/Engine/src/Resources/PairClass.java	(date 1660386625719)
@@ -0,0 +1,21 @@
+package Resources;
+
+public class PairClass<K, V> {
+    private final K key;
+    private final V value;
+
+    public PairClass(K key, V value) {
+        this.key = key;
+        this.value = value;
+    }
+    public static <K, V> PairClass<K, V> of(K first, V second) {
+        return new PairClass<>(first, second);
+    }
+    public K getKey() {
+        return key;
+    }
+
+    public V getValue() {
+        return value;
+    }
+}
Index: DTO/src/immutables/userInterface/InitCode.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/DTO/src/immutables/userInterface/InitCode.java b/DTO/src/immutables/userInterface/InitCode.java
new file mode 100644
--- /dev/null	(date 1660348335535)
+++ b/DTO/src/immutables/userInterface/InitCode.java	(date 1660348335535)
@@ -0,0 +1,166 @@
+package immutables.userInterface;
+
+import Resources.PairClass;
+import enigmaEngine.interfaces.Reflector;
+
+import java.util.*;
+import java.util.stream.Collectors;
+
+// UI->DTO->Engine
+// A DTO for sections 3, 4
+public class InitCode {
+    private Deque<Integer> selectedRotors; // ArrayDeque<Integer>, LIFO collection (as same as stack)
+    private List<Character> startingCharacters;
+    private Reflector.ReflectorID reflector;
+    private List<PairClass<Character, Character>> abcPairs;
+    private List<Integer> notchIndexes;
+
+    // For manual machine initialization
+    public InitCode(String selectedRotors, String startingCharacters, int reflectorID, String plugBoardInput, List<Integer> allNotchIndexes) {
+        this.selectedRotors = createSelectedRotorsDeque(selectedRotors);
+        this.startingCharacters = createStartingCharactersList(startingCharacters);
+        this.reflector = Reflector.ReflectorID.values()[reflectorID - 1]; // Returned value is 1-5
+        this.abcPairs = createPlugBoardPairs(plugBoardInput);
+        this.notchIndexes = mapRelevantNotchIndexes(allNotchIndexes);
+    }
+
+    // For automatic machine initialization
+    public InitCode(String machineABC, int rotorsCount, int totalRotors, List<String> reflectorsID, List<Integer> allNotchIndexes) {
+        this.selectedRotors = createSelectedRotorsDeque(pickRandomRotors(rotorsCount, totalRotors));
+        this.startingCharacters = createStartingCharactersList(pickRandomStartingCharacters(machineABC, rotorsCount));
+        this.reflector = Reflector.ReflectorID.values()[pickRandomReflectorID(reflectorsID)]; // Returned value is 0-4
+        this.abcPairs = createPlugBoardPairs(createRandomABCString(machineABC));
+        this.notchIndexes = mapRelevantNotchIndexes(allNotchIndexes);
+    }
+
+    // Non-Randoms
+
+    private Deque<Integer> createSelectedRotorsDeque(String selectedRotors) {
+        String[] stringRotors = selectedRotors.split(",");
+        int intRotors[] = Arrays.stream(stringRotors).mapToInt(Integer::parseInt).toArray();
+        List<Integer> listRotors = Arrays.stream(intRotors).boxed().collect(Collectors.toList());
+        return new ArrayDeque<>(listRotors);
+    }
+
+    private List<Character> createStartingCharactersList(String startingCharacters) {
+        List<Character> listCharacters = new ArrayList<>();
+        for (char ch : startingCharacters.toCharArray()) {
+            listCharacters.add(ch);
+        }
+        return listCharacters;
+    }
+
+    private List<PairClass<Character, Character>> createPlugBoardPairs(String abcString) {
+        char abcArr[] = abcString.toCharArray();
+        List<PairClass<Character, Character>> abcPairs = new ArrayList<>();
+        for (int i = 0; i < abcArr.length; i += 2) {
+            abcPairs.add(new PairClass<Character, Character>(abcArr[i], abcArr[i + 1]));
+        }
+        return abcPairs;
+    }
+
+    // Randoms
+    private String pickRandomRotors(int rotorsCount, int totalRotors) {
+        // Will generate from left (last) to right (first) rotor-IDs
+        // rotorsCount - rotors the machine will use
+        // totalRotors - the maximum ID of the given rotors in the XML file
+        HashMap<Integer, Boolean> allIDs = new HashMap<Integer, Boolean>();
+        List<Integer> rotorIDs = new ArrayList<>();
+        Random rand = new Random(0);
+        for (int i = 0; i < totalRotors; i++) {
+            allIDs.put(i, false);
+        }
+        for (int i = 0; i < rotorsCount; i++) {
+            int randomID = rand.nextInt() % allIDs.size();
+            rotorIDs.add(randomID);
+            allIDs.remove(randomID);
+        }
+        return rotorIDs.stream().
+                map(String::valueOf).
+                collect(Collectors.joining(",")); // [48, 59] -> "48,59" (List->String)
+    }
+    private String pickRandomStartingCharacters(String machineABC, int rotorsCount) {
+        String res = "";
+        Random rand = new Random(0);
+
+        for (int i = 0; i < rotorsCount; i++) {
+            int randomABCIndex = rand.nextInt() % machineABC.length();
+            res = res + machineABC.charAt(randomABCIndex);
+        }
+        return res;
+    }
+    private int pickRandomReflectorID(List<String> reflectorsID) {
+        HashMap<String, Boolean> allIDs = new HashMap<String, Boolean>(){{
+            put("I", false);
+            put("II", false);
+            put("III", false);
+            put("VI", false);
+            put("V", false);
+        }};
+        for (String singleID : reflectorsID) {
+            if (allIDs.containsValue(singleID) == true) {
+                allIDs.put(singleID, true);
+            }
+        }
+        Random rand = new Random(0);
+        int randomID = 0;
+        Boolean notFoundID = true;
+        do {
+            randomID = rand.nextInt() % 5;
+            if (allIDs.get(randomID).equals(true)) {
+                notFoundID = false;
+            }
+        } while(notFoundID.equals(true));
+        return randomID;
+    }
+
+    private String createRandomABCString(String machineABC) {
+        StringBuilder mutableABC = new StringBuilder(machineABC);
+        String finalString = "";
+        int abcPairs = new Random().nextInt() % ((machineABC.length() / 2) + 1); // TODO: check if the value makes sense
+        Random rand = new Random(0);
+
+        for (int i = 0; i < abcPairs; i++) {
+            for (int j = 0; j < 2; j++) {
+                int index = rand.nextInt(mutableABC.length() + 1);
+                finalString += mutableABC.charAt(index);
+                mutableABC.deleteCharAt(index);
+            }
+        }
+
+        return finalString;
+    }
+
+    private List<Integer> mapRelevantNotchIndexes(List<Integer> allNotchIndexes) {
+        List<Integer> relevantNotches = new ArrayList<>();
+        for (Integer rotorIndex : this.selectedRotors) {
+            relevantNotches.add(0, allNotchIndexes.get(rotorIndex));
+        }
+        if (relevantNotches.size() == 0) {
+            return null;
+        }
+        else {
+            return relevantNotches;
+        }
+    }
+
+    public Deque<Integer> getSelectedRotors() {
+        return this.selectedRotors;
+    }
+
+    public List<Character> getStartingCharacters() {
+        return this.startingCharacters;
+    }
+
+    public Reflector.ReflectorID getReflector() {
+        return this.reflector;
+    }
+
+    public List<PairClass<Character, Character>> getAbcPairs() {
+        return this.abcPairs;
+    }
+
+    public List<Integer> getNotchIndexes() {
+        return this.notchIndexes;
+    }
+}
Index: UI/UI.iml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/UI/UI.iml b/UI/UI.iml
new file mode 100644
--- /dev/null	(date 1660297552595)
+++ b/UI/UI.iml	(date 1660297552595)
@@ -0,0 +1,13 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<module type="JAVA_MODULE" version="4">
+  <component name="NewModuleRootManager" inherit-compiler-output="true">
+    <exclude-output />
+    <content url="file://$MODULE_DIR$">
+      <sourceFolder url="file://$MODULE_DIR$/src" isTestSource="false" />
+    </content>
+    <orderEntry type="inheritedJdk" />
+    <orderEntry type="sourceFolder" forTests="false" />
+    <orderEntry type="module" module-name="Engine" exported="" />
+    <orderEntry type="module" module-name="DTO" exported="" />
+  </component>
+</module>
\ No newline at end of file
Index: Engine/src/enigmaEngine/interfaces/EnigmaEngine.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Engine/src/enigmaEngine/interfaces/EnigmaEngine.java b/Engine/src/enigmaEngine/interfaces/EnigmaEngine.java
new file mode 100644
--- /dev/null	(date 1660326997296)
+++ b/Engine/src/enigmaEngine/interfaces/EnigmaEngine.java	(date 1660326997296)
@@ -0,0 +1,18 @@
+package enigmaEngine.interfaces;
+
+import enigmaEngine.exceptions.InvalidRotorException;
+import enigmaEngine.exceptions.InvalidStartingCharacters;
+
+import java.util.HashMap;
+import java.util.List;
+
+public interface EnigmaEngine {
+
+    HashMap<Integer, Rotor> getRotors();
+    String getMachineABC();
+    char activate(char input);
+    void setSelectedRotors(List<Integer> rotorsIDInorder, List<Character> startingPositions) throws InvalidStartingCharacters, InvalidRotorException;
+    void setStartingCharacters(List<Character> startingCharacters) throws InvalidStartingCharacters;
+    void reset();
+
+}
Index: Engine/src/enigmaEngine/exceptions/UnknownSourceException.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Engine/src/enigmaEngine/exceptions/UnknownSourceException.java b/Engine/src/enigmaEngine/exceptions/UnknownSourceException.java
new file mode 100644
--- /dev/null	(date 1660252850201)
+++ b/Engine/src/enigmaEngine/exceptions/UnknownSourceException.java	(date 1660252850201)
@@ -0,0 +1,7 @@
+package enigmaEngine.exceptions;
+
+public class UnknownSourceException extends Exception {
+    public UnknownSourceException(String message) {
+        super(message);
+    }
+}
Index: UI/src/consoleApp/interfaces/Input.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/UI/src/consoleApp/interfaces/Input.java b/UI/src/consoleApp/interfaces/Input.java
new file mode 100644
--- /dev/null	(date 1660327391033)
+++ b/UI/src/consoleApp/interfaces/Input.java	(date 1660327391033)
@@ -0,0 +1,23 @@
+package consoleApp.interfaces;
+
+import enigmaEngine.exceptions.InvalidABCException;
+import enigmaEngine.exceptions.InvalidReflectorException;
+import enigmaEngine.exceptions.InvalidRotorException;
+import enigmaEngine.exceptions.UnknownSourceException;
+import immutables.userInterface.InitCode;
+
+import javax.xml.bind.JAXBException;
+import java.io.FileNotFoundException;
+
+public interface Input {
+
+    // Only full path is given, not just file
+    void readMachineFromXMLFile() throws JAXBException, InvalidRotorException, FileNotFoundException, InvalidABCException, UnknownSourceException, InvalidReflectorException; // TODO: test - only English letters are allowed, given file is actual XML and not shit, etc... Read page 17 on CTE sheet (1)
+    void getMachineSpecs(); // TODO: read page 18 on CTE sheet (2)
+    InitCode initializePaperEnigmaCodeManually(); // TODO: read page 18 on CTE sheet (3). Can't work before (1) ran.
+    void initializePaperEnigmaCodeAutomatically(); // TODO: read page 19 on CTE sheet (4). Can't work before (1) ran.
+    void encryptInput(); // TODO: read page 19 on CTE sheet (5). Can't work before (3) or (4) ran.
+    void resetMachine(); // TODO: read page 19 on CTE sheet (6). Can't work before (3) or (4) ran.
+    void getMachineStatisticsAndHistory(); // TODO: read page 19 on CTE sheet (7).
+    void exitMachine(); // TODO: read page 19 on CTE sheet (8).
+}
Index: src/enigmaEngine/interfaces/InitializeEnigma.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/enigmaEngine/interfaces/InitializeEnigma.java b/Engine/src/enigmaEngine/interfaces/InitializeEnigma.java
rename from src/enigmaEngine/interfaces/InitializeEnigma.java
rename to Engine/src/enigmaEngine/interfaces/InitializeEnigma.java
--- a/src/enigmaEngine/interfaces/InitializeEnigma.java	(revision 456a367a7a579f9a14793435c5402d6bcd0da362)
+++ b/Engine/src/enigmaEngine/interfaces/InitializeEnigma.java	(date 1660251616551)
@@ -3,11 +3,11 @@
 import enigmaEngine.exceptions.InvalidABCException;
 import enigmaEngine.exceptions.InvalidReflectorException;
 import enigmaEngine.exceptions.InvalidRotorException;
-import enigmaEngine.impl.EnigmaEngine;
+import enigmaEngine.impl.EnigmaEngineImpl;
 
 import javax.xml.bind.JAXBException;
 import java.io.FileNotFoundException;
 
 public interface InitializeEnigma {
-    EnigmaEngine getEnigmaEngineFromSource(String source) throws InvalidABCException, InvalidReflectorException, InvalidRotorException, FileNotFoundException, JAXBException;
+    EnigmaEngineImpl getEnigmaEngineFromSource(String source) throws InvalidABCException, InvalidReflectorException, InvalidRotorException, FileNotFoundException, JAXBException;
 }
Index: DTO/src/immutables/userInterface/GetSource.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/DTO/src/immutables/userInterface/GetSource.java b/DTO/src/immutables/userInterface/GetSource.java
new file mode 100644
--- /dev/null	(date 1660328926259)
+++ b/DTO/src/immutables/userInterface/GetSource.java	(date 1660328926259)
@@ -0,0 +1,54 @@
+package immutables.userInterface;
+
+import enigmaEngine.exceptions.InvalidABCException;
+import enigmaEngine.exceptions.InvalidReflectorException;
+import enigmaEngine.exceptions.InvalidRotorException;
+import enigmaEngine.exceptions.UnknownSourceException;
+import enigmaEngine.interfaces.EnigmaEngine;
+import enigmaEngine.interfaces.Rotor;
+
+import javax.xml.bind.JAXBException;
+import java.io.FileNotFoundException;
+import java.util.ArrayList;
+import java.util.HashMap;
+import java.util.List;
+
+// UI->DTO->Engine
+// A DTO for sections 1,
+public class GetSource {
+
+    private EnigmaEngine engine;
+
+    public GetSource(String path) throws JAXBException, InvalidRotorException, FileNotFoundException, InvalidABCException, UnknownSourceException, InvalidReflectorException {
+        this.engine = new enigmaEngine.InitializeEnigmaEngine().initializeEngine(getFilePathExtension(path), path);
+        // TODO: if this raised some exception, no engine overwriting should happen
+    }
+    private enigmaEngine.InitializeEnigmaEngine.SourceMode getFilePathExtension(String path) {
+        if (path.matches("[a-zA-Z]+") == false) { // TODO: add exception handling
+            System.out.println("Exception! Only English letters can be given.");
+        }
+        int substringLength = path.lastIndexOf(".") + 1;
+        String extension = path.substring(substringLength);
+        return enigmaEngine.InitializeEnigmaEngine.SourceMode.valueOf(extension);
+    }
+
+    public EnigmaEngine getEngine() {
+        return this.engine;
+    }
+
+    public List<Integer> getNotchIndexes() {
+        HashMap<Integer, Rotor> allRotors = this.engine.getRotors();
+        List<Integer> allNotches = new ArrayList<>();
+
+        for (int i = 0; i < allRotors.size(); i++) {
+            allNotches.add(allRotors.get(i).getNotch());
+        }
+
+        if (allRotors.size() == 0) {
+            return null;
+        }
+        else {
+            return allNotches;
+        }
+    }
+}
diff --git a/src/enigmaEngine/schemaBinding/CTERotors.java b/Engine/src/enigmaEngine/schemaBinding/CTERotors.java
rename from src/enigmaEngine/schemaBinding/CTERotors.java
rename to Engine/src/enigmaEngine/schemaBinding/CTERotors.java
diff --git a/src/enigmaEngine/exceptions/InvalidABCException.java b/Engine/src/enigmaEngine/exceptions/InvalidABCException.java
rename from src/enigmaEngine/exceptions/InvalidABCException.java
rename to Engine/src/enigmaEngine/exceptions/InvalidABCException.java
diff --git a/src/enigmaEngine/schemaBinding/CTEReflectors.java b/Engine/src/enigmaEngine/schemaBinding/CTEReflectors.java
rename from src/enigmaEngine/schemaBinding/CTEReflectors.java
rename to Engine/src/enigmaEngine/schemaBinding/CTEReflectors.java
diff --git a/src/enigmaEngine/CreateAndValidateEnigmaComponentsImpl.java b/Engine/src/enigmaEngine/CreateAndValidateEnigmaComponentsImpl.java
rename from src/enigmaEngine/CreateAndValidateEnigmaComponentsImpl.java
rename to Engine/src/enigmaEngine/CreateAndValidateEnigmaComponentsImpl.java
diff --git a/src/enigmaEngine/schemaBinding/CTERotor.java b/Engine/src/enigmaEngine/schemaBinding/CTERotor.java
rename from src/enigmaEngine/schemaBinding/CTERotor.java
rename to Engine/src/enigmaEngine/schemaBinding/CTERotor.java
diff --git a/src/enigmaEngine/schemaBinding/CTEReflect.java b/Engine/src/enigmaEngine/schemaBinding/CTEReflect.java
rename from src/enigmaEngine/schemaBinding/CTEReflect.java
rename to Engine/src/enigmaEngine/schemaBinding/CTEReflect.java
diff --git a/src/enigmaEngine/schemaBinding/CTEReflector.java b/Engine/src/enigmaEngine/schemaBinding/CTEReflector.java
rename from src/enigmaEngine/schemaBinding/CTEReflector.java
rename to Engine/src/enigmaEngine/schemaBinding/CTEReflector.java
diff --git a/src/Resources/Enigma-Ex1.xsd b/Engine/src/Resources/Enigma-Ex1.xsd
rename from src/Resources/Enigma-Ex1.xsd
rename to Engine/src/Resources/Enigma-Ex1.xsd
diff --git a/src/enigmaEngine/schemaBinding/CTEMachine.java b/Engine/src/enigmaEngine/schemaBinding/CTEMachine.java
rename from src/enigmaEngine/schemaBinding/CTEMachine.java
rename to Engine/src/enigmaEngine/schemaBinding/CTEMachine.java
diff --git a/src/enigmaEngine/schemaBinding/CTEPositioning.java b/Engine/src/enigmaEngine/schemaBinding/CTEPositioning.java
rename from src/enigmaEngine/schemaBinding/CTEPositioning.java
rename to Engine/src/enigmaEngine/schemaBinding/CTEPositioning.java
diff --git a/src/Resources/ex1-sanity-small.xml b/Engine/src/Resources/ex1-sanity-small.xml
rename from src/Resources/ex1-sanity-small.xml
rename to Engine/src/Resources/ex1-sanity-small.xml
diff --git a/src/enigmaEngine/schemaBinding/CTEEnigma.java b/Engine/src/enigmaEngine/schemaBinding/CTEEnigma.java
rename from src/enigmaEngine/schemaBinding/CTEEnigma.java
rename to Engine/src/enigmaEngine/schemaBinding/CTEEnigma.java
diff --git a/src/enigmaEngine/impl/ReflectorImpl.java b/Engine/src/enigmaEngine/impl/ReflectorImpl.java
rename from src/enigmaEngine/impl/ReflectorImpl.java
rename to Engine/src/enigmaEngine/impl/ReflectorImpl.java
diff --git a/src/enigmaEngine/interfaces/Rotatable.java b/Engine/src/enigmaEngine/interfaces/Rotatable.java
rename from src/enigmaEngine/interfaces/Rotatable.java
rename to Engine/src/enigmaEngine/interfaces/Rotatable.java
diff --git a/src/enigmaEngine/interfaces/Reflector.java b/Engine/src/enigmaEngine/interfaces/Reflector.java
rename from src/enigmaEngine/interfaces/Reflector.java
rename to Engine/src/enigmaEngine/interfaces/Reflector.java
diff --git a/src/enigmaEngine/interfaces/CreateAndValidateEnigmaComponents.java b/Engine/src/enigmaEngine/interfaces/CreateAndValidateEnigmaComponents.java
rename from src/enigmaEngine/interfaces/CreateAndValidateEnigmaComponents.java
rename to Engine/src/enigmaEngine/interfaces/CreateAndValidateEnigmaComponents.java
diff --git a/src/enigmaEngine/exceptions/InvalidRotorException.java b/Engine/src/enigmaEngine/exceptions/InvalidRotorException.java
rename from src/enigmaEngine/exceptions/InvalidRotorException.java
rename to Engine/src/enigmaEngine/exceptions/InvalidRotorException.java
diff --git a/src/enigmaEngine/exceptions/InvalidStartingCharacters.java b/Engine/src/enigmaEngine/exceptions/InvalidStartingCharacters.java
rename from src/enigmaEngine/exceptions/InvalidStartingCharacters.java
rename to Engine/src/enigmaEngine/exceptions/InvalidStartingCharacters.java
diff --git a/src/enigmaEngine/exceptions/InvalidReflectorException.java b/Engine/src/enigmaEngine/exceptions/InvalidReflectorException.java
rename from src/enigmaEngine/exceptions/InvalidReflectorException.java
rename to Engine/src/enigmaEngine/exceptions/InvalidReflectorException.java
